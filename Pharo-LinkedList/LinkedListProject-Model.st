Object subclass: #LLLinkedList	instanceVariableNames: 'head'	classVariableNames: ''	package: 'LinkedListProject-Model'!!LLLinkedList methodsFor: 'initialization' stamp: '4/1/2025 23:46'!initialize    head := nil.! !!LLLinkedList methodsFor: 'adding' stamp: '4/1/2025 23:40'!addAtBeginning: anObject    | newNode |    newNode := LLNode new.    newNode value: anObject.    newNode next: head.    head := newNode.! !!LLLinkedList methodsFor: 'adding' stamp: '4/1/2025 23:40'!addAtEnd: anObject    | newNode current |    newNode := LLNode new.    newNode value: anObject.    newNode next: nil.    head ifNil: [ head := newNode ] ifNotNil: [        current := head.        [ current next notNil ] whileTrue: [ current := current next ].        current next: newNode.    ].! !!LLLinkedList methodsFor: 'public' stamp: '4/1/2025 23:40'!delete: anObject    | current previous |    current := head.    previous := nil.    [ current notNil and: [ current value ~= anObject ] ] whileTrue: [        previous := current.        current := current next.    ].    current ifNotNil: [        previous ifNil: [ head := current next ]        ifNotNil: [ previous next: current next ].    ].! !!LLLinkedList methodsFor: 'comparing' stamp: '4/1/2025 23:41'!contains: anObject    | current found |    current := head.    found := false.    [ current notNil and: [ found not ] ] whileTrue: [        anObject = current value ifTrue: [ found := true ].        current := current next.    ].    ^ found.! !!LLLinkedList methodsFor: 'printing' stamp: '4/1/2025 23:41'!printList    | current result |    current := head.    result := ''.    [ current notNil ] whileTrue: [        result := result , (current value printString) , ' -> '.        current := current next.    ].    ^ result , 'nil'! !Object subclass: #LLNode	instanceVariableNames: 'value next'	classVariableNames: ''	package: 'LinkedListProject-Model'!!LLNode methodsFor: 'accessing' stamp: '4/1/2025 23:45'!value: anObject    value := anObject.! !!LLNode methodsFor: 'accessing' stamp: '4/1/2025 23:46'!next: aNode    next := aNode.! !!LLNode methodsFor: 'accessing' stamp: '4/1/2025 23:46'!next    ^ next! !!LLNode methodsFor: 'evaluating' stamp: '4/1/2025 23:45'!value    ^ value! !